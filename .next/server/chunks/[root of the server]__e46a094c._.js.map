{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Email and password are required\");\r\n        }\r\n\r\n        // Find the user in the database\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Verify the password\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n        if (!isValid) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Return user object for session\r\n        return { id: user.id, name: user.name, email: user.email };\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  pages: {\r\n    signIn: \"/login\", // Redirect to custom login page\r\n  },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user.id = token.id;\r\n      }\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      return token;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,gCAAgC;gBAChC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,sBAAsB;gBACtB,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,iCAAiC;gBACjC,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC3D;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;IACZ;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/tasks/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"../auth/[...nextauth]/route\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// ✅ Get all tasks for the logged-in user\r\nexport async function GET() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const tasks = await prisma.task.findMany({\r\n    where: { user: { email: session.user.email } },\r\n    orderBy: { createdAt: \"desc\" }, // Ensure this exists in your schema!\r\n  });\r\n\r\n  return NextResponse.json(tasks);\r\n}\r\n\r\n// ✅ Create a new task\r\nexport async function POST(req: Request) {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n  \r\n    const { title, description, points = 10, type = \"personal\", teamMemberId } = await req.json();\r\n  \r\n    const user = await prisma.user.findUnique({\r\n      where: { email: session.user.email },\r\n    });\r\n  \r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n  \r\n    const task = await prisma.task.create({\r\n      data: {\r\n        title,\r\n        description,\r\n        completed: false,\r\n        points,\r\n        userId: user.id,\r\n        type,\r\n        teamMemberId: type === \"team\" ? teamMemberId : null, // Assign team member if team task\r\n      },\r\n    });\r\n  \r\n    return NextResponse.json(task);\r\n  }\r\n  \r\n\r\n// ✅ Update task completion and award/remove points\r\nexport async function PUT(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    // ✅ Parse request body properly\r\n    const body = await req.json();\r\n    console.log(\"Received PUT request body:\", body); // Debugging\r\n    const { id, completed } = body;\r\n\r\n    // ✅ Ensure `id` is valid\r\n    if (!id) {\r\n      return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n    }\r\n\r\n    // ✅ Check if task exists\r\n    const task = await prisma.task.findUnique({ where: { id } });\r\n    if (!task) {\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n    }\r\n\r\n    // ✅ Update task completion status\r\n    const updatedTask = await prisma.task.update({\r\n      where: { id },\r\n      data: { completed },\r\n    });\r\n\r\n    // ✅ Award or remove points\r\n    await prisma.user.update({\r\n      where: { email: session.user.email },\r\n      data: { points: { [completed ? \"increment\" : \"decrement\"]: task.points } },\r\n    });\r\n\r\n    return NextResponse.json(updatedTask);\r\n  } catch (error) {\r\n    console.error(\"PUT /api/tasks error:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ Delete a task\r\nexport async function DELETE(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const { id } = await req.json();\r\n\r\n  if (!id) {\r\n    return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n  }\r\n\r\n  const task = await prisma.task.findUnique({ where: { id } });\r\n\r\n  if (!task) {\r\n    return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n  }\r\n\r\n  await prisma.task.delete({ where: { id } });\r\n\r\n  return NextResponse.json({ message: \"Task deleted successfully\" });\r\n}\r\n// ✅ Fetch team members (excluding current user)\r\nexport async function GET_TEAM_MEMBERS() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const teamMembers = await prisma.user.findMany({\r\n    where: { email: { not: session.user.email } }, // Exclude the logged-in user\r\n    select: { id: true, name: true, email: true },\r\n  });\r\n\r\n  return NextResponse.json(teamMembers);\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,QAAQ,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvC,OAAO;YAAE,MAAM;gBAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;YAAC;QAAE;QAC7C,SAAS;YAAE,WAAW;QAAO;IAC/B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,KAAK,GAAY;IACnC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE,OAAO,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,IAAI;IAE3F,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;IACrC;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QACpC,MAAM;YACJ;YACA;YACA,WAAW;YACX;YACA,QAAQ,KAAK,EAAE;YACf;YACA,cAAc,SAAS,SAAS,eAAe;QACjD;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAIK,eAAe,IAAI,GAAY;IACpC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,IAAI;QACF,gCAAgC;QAChC,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,8BAA8B,OAAO,YAAY;QAC7D,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG;QAE1B,yBAAyB;QACzB,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,yBAAyB;QACzB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAG;QAAE;QAC1D,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,kCAAkC;QAClC,MAAM,cAAc,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YAC3C,OAAO;gBAAE;YAAG;YACZ,MAAM;gBAAE;YAAU;QACpB;QAEA,2BAA2B;QAC3B,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;YAAC;YACnC,MAAM;gBAAE,QAAQ;oBAAE,CAAC,YAAY,cAAc,YAAY,EAAE,KAAK,MAAM;gBAAC;YAAE;QAC3E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,OAAO,GAAY;IACvC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,IAAI,IAAI;IAE7B,IAAI,CAAC,IAAI;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE;QAAG;IAAE;IAE1D,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QAAE,OAAO;YAAE;QAAG;IAAE;IAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAA4B;AAClE;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,cAAc,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC;QAC7C,OAAO;YAAE,OAAO;gBAAE,KAAK,QAAQ,IAAI,CAAC,KAAK;YAAC;QAAE;QAC5C,QAAQ;YAAE,IAAI;YAAM,MAAM;YAAM,OAAO;QAAK;IAC9C;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}