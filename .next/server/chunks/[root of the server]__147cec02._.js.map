{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/tasks/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"../auth/[...nextauth]/authOptions\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// ✅ Create a Task\r\nexport async function POST(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const { title, description, points = 10 } = await req.json(); // Default to 10 points\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n  });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  const task = await prisma.task.create({\r\n    data: {\r\n      title,\r\n      description,\r\n      completed: false,\r\n      points,\r\n      userId: user.id,\r\n    },\r\n  });\r\n\r\n  return NextResponse.json(task);\r\n}\r\n\r\n// ✅ Get All Tasks for the Logged-in User\r\nexport async function GET() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n    include: { tasks: true },\r\n  });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  return NextResponse.json(user.tasks);\r\n}\r\n\r\n// ✅ Mark Task as Completed\r\nexport async function PATCH(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const { taskId } = await req.json();\r\n\r\n  const task = await prisma.task.update({\r\n    where: { id: taskId },\r\n    data: { completed: true },\r\n  });\r\n\r\n  return NextResponse.json(task);\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;;;;AAEA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe,KAAK,GAAY;IACrC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;IACvC,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE,GAAG,MAAM,IAAI,IAAI,IAAI,uBAAuB;IAErF,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;IACrC;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QACpC,MAAM;YACJ;YACA;YACA,WAAW;YACX;YACA,QAAQ,KAAK,EAAE;QACjB;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;IACvC,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;QACnC,SAAS;YAAE,OAAO;QAAK;IACzB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,KAAK,KAAK;AACrC;AAGO,eAAe,MAAM,GAAY;IACtC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;IACvC,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;IAEjC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QACpC,OAAO;YAAE,IAAI;QAAO;QACpB,MAAM;YAAE,WAAW;QAAK;IAC1B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}