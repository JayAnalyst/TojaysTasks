{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Email and password are required\");\r\n        }\r\n\r\n        // Find the user in the database\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Verify the password\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n        if (!isValid) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Return user object for session\r\n        return { id: user.id, name: user.name, email: user.email };\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  pages: {\r\n    signIn: \"/login\", // Redirect to custom login page\r\n  },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user.id = token.id;\r\n      }\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      return token;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,gCAAgC;gBAChC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,sBAAsB;gBACtB,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,iCAAiC;gBACjC,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC3D;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;IACZ;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/user/points/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"../../auth/[...nextauth]/route\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// ✅ Get user points (separate personal & team points)\r\nexport async function GET() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n    select: { id: true },\r\n  });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  // Get personal task points\r\n  const personalPoints = await prisma.task.aggregate({\r\n    where: { userId: user.id, type: \"personal\", completed: true },\r\n    _sum: { points: true },\r\n  });\r\n\r\n  // Get team task points where the user is involved\r\n  const teamTasks = await prisma.task.findMany({\r\n    where: { type: \"team\", completed: true },\r\n    select: { points: true, teamMemberId: true, userId: true },\r\n  });\r\n\r\n  let teamPoints = 0;\r\n\r\n  teamTasks.forEach((task) => {\r\n    if (task.userId === user.id || task.teamMemberId === user.id) {\r\n      teamPoints += task.points / 2; // Split points evenly between both users\r\n    }\r\n  });\r\n\r\n  return NextResponse.json({\r\n    personalPoints: personalPoints._sum.points || 0,\r\n    teamPoints,\r\n  });\r\n}\r\n\r\n// ✅ Create a new task (with points & description)\r\nexport async function POST(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n  }\r\n\r\n  const { title, description, points = 10, type, teamMemberId } = await req.json(); // Default 10 points if not set\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n  });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  // Ensure team tasks have a team member assigned\r\n  if (type === \"team\" && !teamMemberId) {\r\n    return NextResponse.json({ error: \"Team member ID required for team tasks\" }, { status: 400 });\r\n  }\r\n\r\n  const task = await prisma.task.create({\r\n    data: {\r\n      title,\r\n      description,\r\n      completed: false,\r\n      points,\r\n      type,\r\n      userId: user.id,\r\n      teamMemberId: type === \"team\" ? teamMemberId : null,\r\n    },\r\n  });\r\n\r\n  return NextResponse.json(task);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;QACnC,QAAQ;YAAE,IAAI;QAAK;IACrB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,2BAA2B;IAC3B,MAAM,iBAAiB,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC;QACjD,OAAO;YAAE,QAAQ,KAAK,EAAE;YAAE,MAAM;YAAY,WAAW;QAAK;QAC5D,MAAM;YAAE,QAAQ;QAAK;IACvB;IAEA,kDAAkD;IAClD,MAAM,YAAY,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC;QAC3C,OAAO;YAAE,MAAM;YAAQ,WAAW;QAAK;QACvC,QAAQ;YAAE,QAAQ;YAAM,cAAc;YAAM,QAAQ;QAAK;IAC3D;IAEA,IAAI,aAAa;IAEjB,UAAU,OAAO,CAAC,CAAC;QACjB,IAAI,KAAK,MAAM,KAAK,KAAK,EAAE,IAAI,KAAK,YAAY,KAAK,KAAK,EAAE,EAAE;YAC5D,cAAc,KAAK,MAAM,GAAG,GAAG,yCAAyC;QAC1E;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,gBAAgB,eAAe,IAAI,CAAC,MAAM,IAAI;QAC9C;IACF;AACF;AAGO,eAAe,KAAK,GAAY;IACrC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,IAAI,IAAI,+BAA+B;IAEjH,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;IACrC;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,gDAAgD;IAChD,IAAI,SAAS,UAAU,CAAC,cAAc;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyC,GAAG;YAAE,QAAQ;QAAI;IAC9F;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QACpC,MAAM;YACJ;YACA;YACA,WAAW;YACX;YACA;YACA,QAAQ,KAAK,EAAE;YACf,cAAc,SAAS,SAAS,eAAe;QACjD;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}