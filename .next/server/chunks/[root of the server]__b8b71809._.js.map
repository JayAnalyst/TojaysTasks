{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/tasks/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\"; // ✅ Corrected import\r\n\r\n// ✅ GET: Fetch tasks (personal & team)\r\nexport async function GET() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  try {\r\n    console.log(\"Fetching tasks for user:\", session.user.id);\r\n    const tasks = await prisma.task.findMany({\r\n      where: {\r\n        OR: [\r\n          { userId: session.user.id }, // Personal tasks\r\n          { teamMemberId: session.user.id } // Team tasks\r\n        ],\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    return NextResponse.json(tasks);\r\n  } catch (error) {\r\n    console.error(\"Error fetching tasks:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ POST: Create a new task\r\nexport async function POST(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  try {\r\n    const { title, description, points, type, teamMemberId } = await req.json();\r\n    \r\n    if (type === \"team\" && !teamMemberId) {\r\n      return NextResponse.json({ error: \"Team task must have an assigned team member\" }, { status: 400 });\r\n    }\r\n\r\n    const task = await prisma.task.create({\r\n      data: {\r\n        title,\r\n        description,\r\n        points: points ?? 10,\r\n        type,\r\n        userId: session.user.id,\r\n        teamMemberId: type === \"team\" ? teamMemberId : null,\r\n        completed: false, // Ensure new tasks are not completed by default\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(task, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Error creating task:\", error);\r\n    return NextResponse.json({ error: \"Failed to create task\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ PUT: Toggle task completion status\r\nexport async function PUT(req: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n    const { id, completed } = await req.json();\r\n    if (!id) return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n\r\n    const task = await prisma.task.findUnique({ where: { id } });\r\n    if (!task) return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n\r\n    const updatedTask = await prisma.task.update({\r\n      where: { id },\r\n      data: { completed },\r\n    });\r\n\r\n    // ✅ Adjust user points\r\n    if (completed !== task.completed) {\r\n      await prisma.user.update({\r\n        where: { id: session.user.id },\r\n        data: {\r\n          points: completed ? { increment: task.points } : { decrement: task.points },\r\n        },\r\n      });\r\n    }\r\n\r\n    return NextResponse.json(updatedTask);\r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ DELETE: Delete a task\r\nexport async function DELETE(req: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n    const { id } = await req.json();\r\n    if (!id) return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n\r\n    const task = await prisma.task.findUnique({ where: { id } });\r\n    if (!task) return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n\r\n    await prisma.task.delete({ where: { id } });\r\n\r\n    return NextResponse.json({ message: \"Task deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting task:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}