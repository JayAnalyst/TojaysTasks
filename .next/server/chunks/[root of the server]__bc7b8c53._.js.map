{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { email, password } = await req.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: \"Email and password required\" }, { status: 400 });\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json({ error: \"User already exists\" }, { status: 400 });\r\n    }\r\n\r\n    // Hash password before saving\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create new user\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        email,\r\n        password: hashedPassword, // Store hashed password\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({ message: \"User created\", user: newUser }, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Signup error:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,8BAA8B;QAC9B,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,kBAAkB;QAClB,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ;gBACA,UAAU;YACZ;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgB,MAAM;QAAQ,GAAG;YAAE,QAAQ;QAAI;IACrF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}