{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Email and password are required\");\r\n        }\r\n\r\n        // Find the user in the database\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Verify the password\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n        if (!isValid) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        // Return user object for session\r\n        return { id: user.id, name: user.name, email: user.email };\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  pages: {\r\n    signIn: \"/login\", // Redirect to custom login page\r\n  },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user.id = token.id;\r\n      }\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      return token;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,gCAAgC;gBAChC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,sBAAsB;gBACtB,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,iCAAiC;gBACjC,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC3D;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;IACZ;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/James/tjt/tjtapp/src/app/api/tasks/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// ✅ GET: Fetch tasks\r\nexport async function GET() {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  try {\r\n    console.log(\"Fetching tasks for user:\", session.user.id);\r\n    const tasks = await prisma.task.findMany({\r\n      where: {\r\n        OR: [\r\n          { userId: session.user.id },  // Personal tasks\r\n          { teamMemberId: session.user.id } // Team tasks\r\n        ],\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    return NextResponse.json(tasks);\r\n  } catch (error) {\r\n    console.error(\"Error fetching tasks:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ POST: Create a new task\r\nexport async function POST(req: Request) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  try {\r\n    const { title, description, points, type, teamMemberId } = await req.json();\r\n    \r\n    // If it's a team task, ensure a teamMemberId is provided\r\n    if (type === \"team\" && !teamMemberId) {\r\n      return NextResponse.json({ error: \"Team task must have an assigned team member\" }, { status: 400 });\r\n    }\r\n\r\n    const task = await prisma.task.create({\r\n      data: {\r\n        title,\r\n        description,\r\n        points: points ?? 10,\r\n        type,\r\n        userId: session.user.id,\r\n        teamMemberId: type === \"team\" ? teamMemberId : null,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(task, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Error creating task:\", error);\r\n    return NextResponse.json({ error: \"Failed to create task\" }, { status: 500 });\r\n  }\r\n}\r\n// PUT: Toggle task completion status.\r\nexport async function PUT(req: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n    const body = await req.json();\r\n    console.log(\"Received PUT request body:\", body);\r\n    const { id, completed } = body;\r\n    if (!id) {\r\n      return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n    }\r\n    const task = await prisma.task.findUnique({ where: { id } });\r\n    if (!task) {\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n    }\r\n    const updatedTask = await prisma.task.update({\r\n      where: { id },\r\n      data: { completed },\r\n    });\r\n    // Optionally, update user points (increment if completed, decrement if undone)\r\n    await prisma.user.update({\r\n      where: { id: session.user.id },\r\n      data: { points: { [completed ? \"increment\" : \"decrement\"]: task.points } },\r\n    });\r\n    return NextResponse.json(updatedTask);\r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Delete a task.\r\nexport async function DELETE(req: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n    const { id } = await req.json();\r\n    if (!id) {\r\n      return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n    }\r\n    const task = await prisma.task.findUnique({ where: { id } });\r\n    if (!task) {\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n    }\r\n    await prisma.task.delete({ where: { id } });\r\n    return NextResponse.json({ message: \"Task deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting task:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}